{"version":3,"sources":["config.js","App.js","index.js"],"names":["config","checkForInactiveTracks","disableLogs","getNativeBlob","ignoreMutedMedia","initCallback","mimeType","type","App","state","status","src","setState","navigator","mediaDevices","getUserMedia","video","audio","then","stream","a","recorder","RecordRTC","document","getElementById","srcObject","play","startRecording","sleep","m","Promise","r","setTimeout","stopRecording","blob","getBlob","link","createElement","href","URL","createObjectURL","download","innerHTML","body","appendChild","this","id","style","width","height","backgroundColor","React","Component","ReactDOM","render","StrictMode"],"mappings":"6QAAaA,EAAS,CACpBC,wBAAwB,EACxBC,aAAa,EACbC,eAAe,EACfC,kBAAkB,EAClBC,aAAc,KACdC,SAAU,aACVC,KAAM,SC+COC,E,4MA9CbC,MAAQ,CACNC,OAAQ,OACRC,IAAK,I,kEAIe,IAAD,OACbC,EAAW,SAAAZ,GAAM,OAAI,EAAKY,SAASZ,IAEzCa,UAAUC,aAAaC,aAAa,CAClCC,OAAO,EACPC,OAAO,IACNC,KAHH,uCAGQ,WAAeC,GAAf,iBAAAC,EAAA,6DACFC,EAAWC,IAAUH,EAAQnB,GACjCuB,SAASC,eAAe,SAASC,UAAYN,EAC7CI,SAASC,eAAe,SAASE,OACjCd,EAAS,CAACF,OAAQ,gBAClBW,EAASM,iBACHC,EAAQ,SAAAC,GAAC,OAAI,IAAIC,SAAQ,SAAAC,GAAC,OAAIC,WAAWD,EAAGF,OAN5C,SAOAD,EAAM,KAPN,OAQNP,EAASY,eAAc,WACrB,IAAMC,EAAOb,EAASc,UAClBC,EAAOb,SAASc,cAAc,KAClCD,EAAKE,KAAOC,IAAIC,gBAAgBN,GAChCE,EAAKK,SAAW,wBAChBL,EAAKM,UAAY,kCACjBnB,SAASoB,KAAKC,YAAYR,GAC1BxB,EAAS,CAACF,OAAQ,YAfd,2CAHR,yD,+BAwBA,OACE,6BACE,4BAAKmC,KAAKpC,MAAMC,QAChB,4BAAKmC,KAAKpC,MAAME,KAChB,2BACEmC,GAAG,QACHC,MAAO,CAACC,MAAO,IAAKC,OAAQ,IAAKC,gBAAiB,gB,GAxC1CC,IAAMC,WCHxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASC,eAAe,W","file":"static/js/main.a388a17a.chunk.js","sourcesContent":["export const config = {\r\n  checkForInactiveTracks: false,\r\n  disableLogs: false,\r\n  getNativeBlob: false,\r\n  ignoreMutedMedia: false,\r\n  initCallback: null,\r\n  mimeType: \"video/webm\",\r\n  type: \"video\"\r\n};","import React from 'react';\n//import { Player } from 'video-react';\nimport \"video-react/dist/video-react.css\";\n//import Axios from 'axios';\nimport RecordRTC from 'recordrtc';\nimport { config } from './config';\n\nclass App extends React.Component {\n  state = {\n    status: \"None\", \n    src: \"\"\n  };\n\n    \n  componentDidMount () {\n    const setState = config => this.setState(config);\n\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(async function(stream){\n      let recorder = RecordRTC(stream, config);\n      document.getElementById(\"video\").srcObject = stream;\n      document.getElementById(\"video\").play();\n      setState({status: \"recording..\"});\n      recorder.startRecording();\n      const sleep = m => new Promise(r => setTimeout(r, m));\n      await sleep(5000);\n      recorder.stopRecording(function() {\n        const blob = recorder.getBlob();\n        var link = document.createElement(\"a\"); // Or maybe get it from the current document\n        link.href = URL.createObjectURL(blob);\n        link.download = \"aDefaultFileName.webm\";\n        link.innerHTML = \"Click here to download the file\";\n        document.body.appendChild(link); // Or append it wh\n        setState({status: \"done\"});\n      })\n    }); \n  }\n\n  render(){\n    return (\n      <div>\n        <h1>{this.state.status}</h1>\n        <h1>{this.state.src}</h1>\n        <video \n          id=\"video\" \n          style={{width: 400, height: 300, backgroundColor: \"black\"}} \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}