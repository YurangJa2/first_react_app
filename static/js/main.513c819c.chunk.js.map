{"version":3,"sources":["config.js","Recorder.js","App.js","index.js"],"names":["config","checkForInactiveTracks","disableLogs","getNativeBlob","ignoreMutedMedia","initCallback","mimeType","type","Recorder","state","initial","file","showSelect","a","setState","undefined","navigator","mediaDevices","getUserMedia","video","audio","then","stream","document","getElementById","srcObject","play","alert","onStart","recorder","RecordRTC","startRecording","status","onFinish","stopRecording","blob","getBlob","link","createElement","href","URL","createObjectURL","download","innerHTML","body","appendChild","onChangeFile","v","target","files","console","log","src","this","audioOnly","props","style","width","height","display","flexDirection","alignItems","justifyContent","padding","backgroundColor","accept","onChange","id","controls","onClick","onClickCancel","React","Component","App","onClickAudio","onClickVideo","marginTop","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.513c819c.chunk.js","sourcesContent":["export const config = {\r\n  checkForInactiveTracks: false,\r\n  disableLogs: false,\r\n  getNativeBlob: false,\r\n  ignoreMutedMedia: false,\r\n  initCallback: null,\r\n  mimeType: \"video/webm\",\r\n  type: \"video\"\r\n};","import React from \"react\";\r\nimport RecordRTC from 'recordrtc';\r\nimport { config } from './config';\r\n\r\nclass Recorder extends React.Component {\r\n  state = {\r\n    initial: true,\r\n    file: null,\r\n    showSelect: false\r\n  };\r\n\r\n  a = () =>  {\r\n    const setState = config => this.setState(config);\r\n    if (navigator.mediaDevices === undefined) {\r\n      alert(\"이 브라우저는 지원하지 않습니다. 다른 브라우저를 이용해 주세요.\");\r\n      return;\r\n    }\r\n    navigator.mediaDevices.getUserMedia({\r\n      video: true,\r\n      audio: true\r\n    }).then(async function(stream){\r\n      document.getElementById(\"video\").srcObject = stream;\r\n      document.getElementById(\"video\").play();\r\n      setState({stream: stream});\r\n    }); \r\n  }\r\n\r\n  onStart = () => {\r\n    const {stream} = this.state;\r\n    let recorder = RecordRTC(stream, config);\r\n    recorder.startRecording();\r\n    this.setState({status: \"recording..\", recorder: recorder});\r\n  };\r\n\r\n  onFinish = () => {\r\n    const setState = config => this.setState(config);\r\n    const {recorder} = this.state;\r\n    recorder.stopRecording(function() {\r\n      const blob = recorder.getBlob();\r\n      var link = document.createElement(\"a\"); // Or maybe get it from the current document\r\n      link.href = URL.createObjectURL(blob);\r\n      link.download = \"aDefaultFileName.webm\";\r\n      link.innerHTML = \"Click here to download the file\";\r\n      document.body.appendChild(link); // Or append it wh\r\n      setState({status: \"done\"});\r\n    });\r\n  };\r\n\r\n  onChangeFile = v => {\r\n    const file = v.target.files[0];\r\n    // initial 상태를 풀고, 비디오에 영상을 넣는다.\r\n    this.setState({file, initial: false}, () => {\r\n      console.log(file);\r\n      document.getElementById(\"video\").src = URL.createObjectURL(file);\r\n    });\r\n  }\r\n\r\n  render () {\r\n    const {initial} = this.state;\r\n    const {audioOnly} = this.props;\r\n    return (\r\n      <div style={{\r\n        width: 600,\r\n        height: 520, \r\n        display: \"flex\", \r\n        flexDirection: \"column\", \r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\",\r\n        padding: 20,\r\n        backgroundColor: \"#ddd\"\r\n      }}>\r\n        {initial ? (\r\n          <div style={{\r\n            width: 600, height: 400, display: \"flex\", flexDirection: \"column\", \r\n            alignItems: \"center\", justifyContent: \"centeR\", backgroundColor: \"white\"}}>\r\n            <input type=\"file\" accept={audioOnly ? \"audio/*\" : \"video/*\"} onChange={this.onChangeFile} />\r\n            <span>위 버튼을 누르면 <b>영상 촬영</b>을 할 수 있습니다.</span>\r\n            <span>녹음/녹화를 마치신 후 <b>확인</b> 버튼을 눌러주세요.</span>\r\n          </div>\r\n        ) : (\r\n          <video id=\"video\" controls width={600} height={480} style={{backgroundColor: \"white\"}} />\r\n        )}\r\n        <div style={{display: \"flex\", flexDirection: \"row\"}}>\r\n          <button onClick={this.onClickCancel} >취소</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Recorder;","import React from 'react';\n//import { Player } from 'video-react';\nimport \"video-react/dist/video-react.css\";\nimport Recorder from \"./Recorder\";\n\nclass App extends React.Component {\n  state = {\n    showSelect: false,\n    audioOnly: null\n  };\n\n  onClick = () => this.setState({showSelect: true, audioOnly: null});\n  onClickAudio = () => this.setState({showSelect: false, audioOnly: true});\n  onClickVideo = () => this.setState({showSelect: false, audioOnly: false});\n\n  render(){\n    const {showSelect, audioOnly} = this.state;\n    return (\n      <div style={{display: \"block\"}}>\n        <h1>RecordRTC 음성/영상 업로드 프로토타입</h1>\n        <button onClick={this.onClick}>음성 혹은 영상으로 입력하기</button>\n        {showSelect ? (\n          <div style={{marginTop: 30, display: \"block\"}}>\n            <button onClick={this.onClickAudio}>음성으로 입력하기</button>\n            <button onClick={this.onClickVideo}>영상으로 입력하기</button>\n          </div>\n        ) : null}\n        {audioOnly !== null ? (\n          <Recorder audioOnly={audioOnly} />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}