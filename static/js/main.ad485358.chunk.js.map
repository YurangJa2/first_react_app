{"version":3,"sources":["Recorder.js","App.js","index.js"],"names":["Recorder","state","initial","stream","recorder","file","recording","recordTime","calculateTimeDuration","secs","hr","Math","floor","min","sec","onClickDisplay","audioOnly","props","setState","config","navigator","mediaDevices","undefined","alert","getUserMedia","audio","video","then","a","console","log","document","getElementById","srcObject","muted","catch","e","onClickStart","RecordRTC","mimeType","type","timeSlice","startRecording","startTime","Date","getTime","looper","d","timeDuration","onClickFinish","setTimeout","stopRecording","blob","getBlob","src","URL","createObjectURL","stop","destroy","onClickReset","onChangeFile","v","target","files","onClickCancel","onHide","this","style","width","display","flexDirection","alignItems","justifyContent","padding","backgroundColor","height","onClick","accept","onChange","id","autoPlay","controls","href","download","React","Component","App","showSelect","onClickAudio","onClickVideo","marginTop","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ad485358.chunk.js","sourcesContent":["import React from \"react\";\r\nimport RecordRTC from 'recordrtc';\r\n\r\nclass Recorder extends React.Component {\r\n  state = {\r\n    initial: true,\r\n    stream: null,\r\n    recorder: null,\r\n    file: null,\r\n    recording: null,\r\n    recordTime: \"\"\r\n  };\r\n\r\n  calculateTimeDuration = secs => {\r\n    var hr = Math.floor(secs / 3600);\r\n    var min = Math.floor((secs - (hr * 3600)) / 60);\r\n    var sec = Math.floor(secs - (hr * 3600) - (min * 60));\r\n    if (min < 10) min = \"0\" + min;\r\n    if (sec < 10) sec = \"0\" + sec;\r\n    if(hr <= 0) return min + ':' + sec;\r\n    return hr + ':' + min + ':' + sec;\r\n  }\r\n\r\n  onClickDisplay = () => {\r\n    const {audioOnly} = this.props;\r\n    const setState = config => this.setState(config);\r\n    this.setState({initial: false});\r\n    // 마이크와 영상 권한을 얻는다.\r\n    if (navigator.mediaDevices === null || navigator.mediaDevices === undefined ){\r\n      alert(\"이 브라우저는 실시간 녹음 또는 녹화가 지원되지 않습니다. 다른 브라우저를 이용하거나 파일 업로드 기능을 이용해 주세요.\");\r\n      setState({initial: true});\r\n      return;\r\n    }\r\n    navigator.mediaDevices.getUserMedia(\r\n      audioOnly ? { audio: true } : { video: true, audio: true }\r\n    ).then(async function(stream){\r\n      console.log(\"Got Medias\");\r\n      setState({stream, recording: false});\r\n      const video = document.getElementById(\"video\");\r\n      video.srcObject = stream;\r\n      video.muted = true;\r\n    }).catch(e => {\r\n      alert(\"오류가 발생했습니다. 다른 브라우저를 이용하거나 파일 업로드 기능을 이용해 주세요.\");\r\n      setState({initial: true});\r\n    }); \r\n  };\r\n\r\n  onClickStart = () => {\r\n    const {audioOnly} = this.props;\r\n    const {stream} = this.state;\r\n    let recorder = RecordRTC(stream, audioOnly ? ({\r\n      mimeType: \"audio/webm\",\r\n      type: \"audio\",\r\n      timeSlice: 1000\r\n    }) : ({\r\n      mimeType: \"video/webm;codecs=vp8\",\r\n      type: \"video\",\r\n      timeSlice: 1000\r\n    }));\r\n    recorder.startRecording();\r\n    console.log(\"Started Recording\");\r\n\r\n    const getState = () => this.state;\r\n    const setState = config => this.setState(config);\r\n    const duration = d => this.calculateTimeDuration(d);\r\n    const finish = () => this.onClickFinish();\r\n    \r\n    this.setState({recorder, recording: true}, () => {\r\n      // 녹화 시간 계산\r\n      const startTime = new Date().getTime();\r\n      (function looper() {\r\n        if (!getState().recorder) return;\r\n        const timeDuration = duration((new Date().getTime() - startTime) / 1000);\r\n        if (timeDuration === \"00:10\") finish();\r\n        setState({recordTime: timeDuration});\r\n        setTimeout(looper, 1000);\r\n      })();\r\n    });\r\n  };\r\n  \r\n  onClickFinish = () => {\r\n    const setState = config => this.setState(config);\r\n    const {stream, recorder} = this.state;\r\n    recorder.stopRecording(function() {\r\n      console.log(\"Stopped Recording\");\r\n      const blob = recorder.getBlob();\r\n      // 비디오 태그에 추가.\r\n      const video = document.getElementById(\"video\");\r\n      video.srcObject = null;\r\n      video.src = URL.createObjectURL(blob);\r\n      video.muted = false;\r\n\r\n\r\n      // 스트림과 레코더 폐기\r\n      stream.stop();\r\n      recorder.destroy();\r\n      setState({recorder: null, stream: null, recording: null, file: blob});\r\n    });\r\n  };\r\n\r\n  onClickReset = () => {\r\n    const {stream, recorder} = this.state;\r\n    // 스트림과 레코더 폐기\r\n    if (stream !== null) stream.stop();\r\n    if (recorder !== null) recorder.destroy();\r\n    this.setState({initial: true, stream: null, recorder: null});\r\n  };\r\n\r\n  onChangeFile = v => {\r\n    const file = v.target.files[0];\r\n    // initial 상태를 풀고, 비디오에 영상을 넣는다.\r\n    this.setState({file, initial: false}, () => {\r\n      console.log(file);\r\n      document.getElementById(\"video\").src = URL.createObjectURL(file);\r\n    });\r\n  };\r\n\r\n  onClickCancel = () => {\r\n    const {stream, recorder} = this.state;\r\n    // 스트림과 레코더 폐기\r\n    if (stream !== null) stream.stop();\r\n    if (recorder !== null) recorder.destroy();\r\n    this.props.onHide();\r\n  };\r\n\r\n  render () {\r\n    const {initial, recording, file, recordTime} = this.state;\r\n    const {audioOnly} = this.props;\r\n    return (\r\n      <div style={{\r\n        width: 400,\r\n        display: \"flex\", flexDirection: \"column\", \r\n        alignItems: \"center\", justifyContent: \"space-between\",\r\n        padding: 20, backgroundColor: \"#ddd\"\r\n      }}>\r\n        {initial ? (\r\n          <div style={{\r\n            width: 400, height: 280, display: \"flex\", flexDirection: \"column\", \r\n            alignItems: \"center\", justifyContent: \"center\", backgroundColor: \"white\"}}>\r\n            <button onClick={this.onClickDisplay} >실시간 {audioOnly ? \"녹음\" : \"녹화\"}</button>\r\n            <input type=\"file\" accept={audioOnly ? \"audio/*\" : \"video/*\"} onChange={this.onChangeFile} />\r\n            <span>위 버튼을 누르면 <b>영상 촬영</b>을 할 수 있습니다.</span>\r\n            <span>녹음/녹화를 마치신 후 <b>확인</b> 버튼을 눌러주세요.</span>\r\n          </div>\r\n        ) : (\r\n          <video id=\"video\" autoPlay controls={recording === null} width={400} height={audioOnly ? 50 : 280} style={{backgroundColor: \"transparent\"}} />\r\n        )}\r\n        <span>녹화 시간: {recordTime}(최대 00:10)</span>\r\n        <div style={{display: \"flex\", flexDirection: \"row\"}}>\r\n          {initial === false && recording === false? (\r\n            <button onClick={this.onClickStart} >녹음 시작</button>\r\n          ) : null}\r\n          {initial === false && recording === true ? (\r\n            <button onClick={this.onClickFinish} >녹음 종료</button>\r\n          ) : null}\r\n          {initial === false && file !== null ? (\r\n            <a href={URL.createObjectURL(file)} download={audioOnly ? \"audio.webm\" : \"video.webm\"}>다운로드</a>\r\n          ) : null}\r\n          {initial === false ? (\r\n            <button onClick={this.onClickReset} >처음부터</button>\r\n          ) : null}\r\n          <button onClick={this.onClickCancel} >취소</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Recorder;","import React from 'react';\n//import { Player } from 'video-react';\nimport \"video-react/dist/video-react.css\";\nimport Recorder from \"./Recorder\";\n\nclass App extends React.Component {\n  state = {\n    showSelect: false,\n    audioOnly: null\n  };\n\n  onClick = () => this.setState({showSelect: true, audioOnly: null});\n  onClickAudio = () => this.setState({showSelect: false, audioOnly: true});\n  onClickVideo = () => this.setState({showSelect: false, audioOnly: false});\n  onHide = () => this.setState({showSelect: false, audioOnly: null});\n\n  render(){\n    const {showSelect, audioOnly} = this.state;\n    return (\n      <div style={{display: \"block\"}}>\n        <h1>RecordRTC 음성/영상 업로드 프로토타입</h1>\n        <button onClick={this.onClick}>음성 혹은 영상으로 입력하기</button>\n        {showSelect ? (\n          <div style={{marginTop: 30, display: \"block\"}}>\n            <button onClick={this.onClickAudio}>음성으로 입력하기</button>\n            <button onClick={this.onClickVideo}>영상으로 입력하기</button>\n          </div>\n        ) : null}\n        {audioOnly !== null ? (\n          <Recorder audioOnly={audioOnly} onHide={this.onHide}/>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}